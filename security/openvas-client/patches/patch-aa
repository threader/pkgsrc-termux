$NetBSD: patch-aa,v 1.1 2009/12/09 05:19:36 obache Exp $

avoid to conflict with stdout/stderr in stdio.h.

--- src/openvas-lib/openvas_ssh_login.c.orig	2008-12-17 09:29:56.000000000 +0000
+++ src/openvas-lib/openvas_ssh_login.c
@@ -77,8 +77,8 @@ static
 gboolean openvas_ssh_privkey_create(char* pubkey_file, char* privkey_file,
                                     char* passphrase_pub, char* passphrase_priv)
 {
-  gchar* stdout = NULL;
-  gchar* stderr = NULL;
+  gchar* std_out = NULL;
+  gchar* std_err = NULL;
   GError* err = NULL;
   gint exit_status;
   char* dir;
@@ -116,14 +116,14 @@ gboolean openvas_ssh_privkey_create(char
                                     privkey_file, " -passout pass:",
                                     passphrase_priv, NULL);
   
-  if(g_spawn_command_line_sync(command, &stdout, &stderr, &exit_status, &err) == FALSE
+  if(g_spawn_command_line_sync(command, &std_out, &std_err, &exit_status, &err) == FALSE
           || exit_status != 0 )
   {
     show_error(_("Error creating private key file.\nFor further information consult your shell."));
     printf("Error creating private key file.");
     printf("\tSpawned openssl process returned with %d.\n", exit_status);
-    printf("\t\t stdout: %s", stdout);
-    printf("\t\t stderr: %s", stderr);
+    printf("\t\t stdout: %s", std_out);
+    printf("\t\t stderr: %s", std_err);
     return FALSE;
   }
 
@@ -144,8 +144,8 @@ static
 gboolean openvas_ssh_pubkey_create(char* comment, char* passphrase,
                                    char* filepath)
 {
-  gchar* stdout = NULL;
-  gchar* stderr = NULL;
+  gchar* std_out = NULL;
+  gchar* std_err = NULL;
   GError* err = NULL;
   gint exit_status;
   char* dir;
@@ -191,14 +191,14 @@ gboolean openvas_ssh_pubkey_create(char*
                                     comment, " -P ", passphrase, NULL);
   efree(&file_pubstripped);
 
-  if(g_spawn_command_line_sync(command, &stdout, &stderr, &exit_status, &err) == FALSE
+  if(g_spawn_command_line_sync(command, &std_out, &std_err, &exit_status, &err) == FALSE
      || exit_status != 0 )
   {
     show_error(_("Error creating public key file.\nFor further information consult your shell."));
     printf("Error creating public key file.\n");
     printf("\tSpawned key-gen process returned with %d.\n", exit_status);
-    printf("\t\t stdout: %s", stdout);
-    printf("\t\t stderr: %s", stderr);
+    printf("\t\t stdout: %s", std_out);
+    printf("\t\t stderr: %s", std_err);
     return FALSE;
   }
   return TRUE;
