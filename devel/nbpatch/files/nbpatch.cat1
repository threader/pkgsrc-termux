PATCH(1)                    General Commands Manual                   PATCH(1)

NNAAMMEE
     ppaattcchh - apply a diff file to an original

SSYYNNOOPPSSIISS
     ppaattcchh [--bbCCccEEeeffllNNnnRRssttuuvv] [--BB _b_a_c_k_u_p_-_p_r_e_f_i_x] [--DD _s_y_m_b_o_l] [--dd _d_i_r_e_c_t_o_r_y]
           [--FF _m_a_x_-_f_u_z_z] [--ii _p_a_t_c_h_f_i_l_e] [--oo _o_u_t_-_f_i_l_e] [--pp _s_t_r_i_p_-_c_o_u_n_t]
           [--rr _r_e_j_-_n_a_m_e] [--VV tt | nniill | nneevveerr | nnoonnee] [--xx _n_u_m_b_e_r]
           [--zz _b_a_c_k_u_p_-_e_x_t] [----ppoossiixx] [_o_r_i_g_f_i_l_e [_p_a_t_c_h_f_i_l_e]]
     ppaattcchh <_p_a_t_c_h_f_i_l_e

DDEESSCCRRIIPPTTIIOONN
     ppaattcchh will take a patch file containing any of the four forms of
     difference listing produced by the diff(1) program and apply those
     differences to an original file, producing a patched version.  If
     _p_a_t_c_h_f_i_l_e is omitted, or is a hyphen, the patch will be read from the
     standard input.

     ppaattcchh will attempt to determine the type of the diff listing, unless
     over-ruled by a --cc, --ee, --nn, or --uu option.  Context diffs (old-style, new-
     style, and unified) and normal diffs are applied directly by the ppaattcchh
     program itself, whereas ed diffs are simply fed to the ed(1) editor via a
     pipe.

     If the _p_a_t_c_h_f_i_l_e contains more than one patch, ppaattcchh will try to apply
     each of them as if they came from separate patch files.  This means,
     among other things, that it is assumed that the name of the file to patch
     must be determined for each diff listing, and that the garbage before
     each diff listing will be examined for interesting things such as file
     names and revision level (see the section on _F_i_l_e_n_a_m_e _D_e_t_e_r_m_i_n_a_t_i_o_n
     below).

     The options are as follows:

     --BB _b_a_c_k_u_p_-_p_r_e_f_i_x, ----pprreeffiixx _b_a_c_k_u_p_-_p_r_e_f_i_x
             Causes the next argument to be interpreted as a prefix to the
             backup file name.  If this argument is specified, any argument to
             --zz will be ignored.

     --bb, ----bbaacckkuupp
             Save a backup copy of the file before it is modified.  By default
             the original file is saved with a backup extension of ".orig"
             unless the file already has a numbered backup, in which case a
             numbered backup is made.  This is equivalent to specifying "--VV
             eexxiissttiinngg".  This option is currently the default, unless ----ppoossiixx
             is specified.

     --CC, ----cchheecckk
             Checks that the patch would apply cleanly, but does not modify
             anything.

     --cc, ----ccoonntteexxtt
             Forces ppaattcchh to interpret the patch file as a context diff.

     --DD _s_y_m_b_o_l, ----iiffddeeff _s_y_m_b_o_l
             Causes ppaattcchh to use the "#ifdef...#endif" construct to mark
             changes.  The argument following will be used as the
             differentiating symbol.  Note that, unlike the C compiler, there
             must be a space between the --DD and the argument.

     --dd _d_i_r_e_c_t_o_r_y, ----ddiirreeccttoorryy _d_i_r_e_c_t_o_r_y
             Causes ppaattcchh to interpret the next argument as a directory, and
             change the working directory to it before doing anything else.

     --EE, ----rreemmoovvee--eemmppttyy--ffiilleess
             Causes ppaattcchh to remove output files that are empty after the
             patches have been applied.  This option is useful when applying
             patches that create or remove files.

     --ee, ----eedd
             Forces ppaattcchh to interpret the patch file as an ed(1) script.

     --FF _m_a_x_-_f_u_z_z, ----ffuuzzzz _m_a_x_-_f_u_z_z
             Sets the maximum fuzz factor.  This option only applies to
             context diffs, and causes ppaattcchh to ignore up to that many lines
             in looking for places to install a hunk.  Note that a larger fuzz
             factor increases the odds of a faulty patch.  The default fuzz
             factor is 2, and it may not be set to more than the number of
             lines of context in the context diff, ordinarily 3.

     --ff, ----ffoorrccee
             Forces ppaattcchh to assume that the user knows exactly what he or she
             is doing, and to not ask any questions.  It assumes the
             following: skip patches for which a file to patch can't be found;
             patch files even though they have the wrong version for the
             "Prereq:" line in the patch; and assume that patches are not
             reversed even if they look like they are.  This option does not
             suppress commentary; use --ss for that.

     --ii _p_a_t_c_h_f_i_l_e, ----iinnppuutt _p_a_t_c_h_f_i_l_e
             Causes the next argument to be interpreted as the input file name
             (i.e., a patchfile).  This option may be specified multiple
             times.

     --ll, ----iiggnnoorree--wwhhiitteessppaaccee
             Causes the pattern matching to be done loosely, in case the tabs
             and spaces have been munged in your input file.  Any sequence of
             whitespace in the pattern line will match any sequence in the
             input file.  Normal characters must still match exactly.  Each
             line of the context must still match a line in the input file.

     --NN, ----ffoorrwwaarrdd
             Causes ppaattcchh to ignore patches that it thinks are reversed or
             already applied.  See also --RR.

     --nn, ----nnoorrmmaall
             Forces ppaattcchh to interpret the patch file as a normal diff.

     --oo _o_u_t_-_f_i_l_e, ----oouuttppuutt _o_u_t_-_f_i_l_e
             Causes the next argument to be interpreted as the output file
             name.

     --pp _s_t_r_i_p_-_c_o_u_n_t, ----ssttrriipp _s_t_r_i_p_-_c_o_u_n_t
             Sets the pathname strip count, which controls how pathnames found
             in the patch file are treated, in case you keep your files in a
             different directory than the person who sent out the patch.  The
             strip count specifies how many slashes are to be stripped from
             the front of the pathname.  (Any intervening directory names also
             go away.)  For example, supposing the file name in the patch file
             was _/_u_/_h_o_w_a_r_d_/_s_r_c_/_b_l_u_r_f_l_/_b_l_u_r_f_l_._c:

             Setting --pp_0 gives the entire pathname unmodified.

             --pp_1 gives

                   _u_/_h_o_w_a_r_d_/_s_r_c_/_b_l_u_r_f_l_/_b_l_u_r_f_l_._c

             without the leading slash.

             --pp_4 gives

                   _b_l_u_r_f_l_/_b_l_u_r_f_l_._c

             Not specifying --pp at all just gives you _b_l_u_r_f_l_._c, unless all of
             the directories in the leading path (_u_/_h_o_w_a_r_d_/_s_r_c_/_b_l_u_r_f_l) exist
             and that path is relative, in which case you get the entire
             pathname unmodified.  Whatever you end up with is looked for
             either in the current directory, or the directory specified by
             the --dd option.

     --RR, ----rreevveerrssee
             Tells ppaattcchh that this patch was created with the old and new
             files swapped.  (Yes, I'm afraid that does happen occasionally,
             human nature being what it is.)  ppaattcchh will attempt to swap each
             hunk around before applying it.  Rejects will come out in the
             swapped format.  The --RR option will not work with ed diff scripts
             because there is too little information to reconstruct the
             reverse operation.

             If the first hunk of a patch fails, ppaattcchh will reverse the hunk
             to see if it can be applied that way.  If it can, you will be
             asked if you want to have the --RR option set.  If it can't, the
             patch will continue to be applied normally.  (Note: this method
             cannot detect a reversed patch if it is a normal diff and if the
             first command is an append (i.e., it should have been a delete)
             since appends always succeed, due to the fact that a null context
             will match anywhere.  Luckily, most patches add or change lines
             rather than delete them, so most reversed normal diffs will begin
             with a delete, which will fail, triggering the heuristic.)

     --rr _r_e_j_-_n_a_m_e, ----rreejjeecctt--ffiillee _r_e_j_-_n_a_m_e
             Causes the next argument to be interpreted as the reject file
             name.

     --ss, ----qquuiieett, ----ssiilleenntt
             Makes ppaattcchh do its work silently, unless an error occurs.

     --tt, ----bbaattcchh
             Similar to --ff, in that it suppresses questions, but makes some
             different assumptions: skip patches for which a file to patch
             can't be found (the same as --ff); skip patches for which the file
             has the wrong version for the "Prereq:" line in the patch; and
             assume that patches are reversed if they look like they are.

     --uu, ----uunniiffiieedd
             Forces ppaattcchh to interpret the patch file as a unified context
             diff (a unidiff).

     --VV tt | nniill | nneevveerr | nnoonnee, ----vveerrssiioonn--ccoonnttrrooll tt | nniill | nneevveerr | nnoonnee
             Causes the next argument to be interpreted as a method for
             creating backup file names.  The type of backups made can also be
             given in the PATCH_VERSION_CONTROL or VERSION_CONTROL environment
             variables, which are overridden by this option.  The --BB option
             overrides this option, causing the prefix to always be used for
             making backup file names.  The values of the
             PATCH_VERSION_CONTROL and VERSION_CONTROL environment variables
             and the argument to the --VV option are like the GNU Emacs
             ``version-control'' variable; they also recognize synonyms that
             are more descriptive.  The valid values are (unique abbreviations
             are accepted):

                   tt, nnuummbbeerreedd
                           Always make numbered backups.

                   nniill, eexxiissttiinngg
                           Make numbered backups of files that already have
                           them, simple backups of the others.

                   nneevveerr, ssiimmppllee
                           Always make simple backups.

                   nnoonnee    No backups are created.

     --vv, ----vveerrssiioonn
             Causes ppaattcchh to print out its revision header and patch level.

     --xx _n_u_m_b_e_r, ----ddeebbuugg _n_u_m_b_e_r
             Sets internal debugging flags, and is of interest only to ppaattcchh
             patchers.

     --zz _b_a_c_k_u_p_-_e_x_t, ----ssuuffffiixx _b_a_c_k_u_p_-_e_x_t
             Causes the next argument to be interpreted as the backup
             extension, to be used in place of ".orig".

     ----ppoossiixx
             Enables strict IEEE Std 1003.1-2004 (``POSIX.1'') conformance,
             specifically:

             1.   Backup files are not created unless the --bb option is
                  specified.

             2.   If unspecified, the file name used is the first of the old,
                  new and index files that exists.

   PPaattcchh AApppplliiccaattiioonn
     ppaattcchh will try to skip any leading garbage, apply the diff, and then skip
     any trailing garbage.  Thus you could feed an article or message
     containing a diff listing to ppaattcchh, and it should work.  If the entire
     diff is indented by a consistent amount, this will be taken into account.

     With context diffs, and to a lesser extent with normal diffs, ppaattcchh can
     detect when the line numbers mentioned in the patch are incorrect, and
     will attempt to find the correct place to apply each hunk of the patch.
     As a first guess, it takes the line number mentioned for the hunk, plus
     or minus any offset used in applying the previous hunk.  If that is not
     the correct place, ppaattcchh will scan both forwards and backwards for a set
     of lines matching the context given in the hunk.  First ppaattcchh looks for a
     place where all lines of the context match.  If no such place is found,
     and it's a context diff, and the maximum fuzz factor is set to 1 or more,
     then another scan takes place ignoring the first and last line of
     context.  If that fails, and the maximum fuzz factor is set to 2 or more,
     the first two and last two lines of context are ignored, and another scan
     is made.  (The default maximum fuzz factor is 2.)

     If ppaattcchh cannot find a place to install that hunk of the patch, it will
     put the hunk out to a reject file, which normally is the name of the
     output file plus ".rej".  (Note that the rejected hunk will come out in
     context diff form whether the input patch was a context diff or a normal
     diff.  If the input was a normal diff, many of the contexts will simply
     be null.)  The line numbers on the hunks in the reject file may be
     different than in the patch file: they reflect the approximate location
     patch thinks the failed hunks belong in the new file rather than the old
     one.

     As each hunk is completed, you will be told whether the hunk succeeded or
     failed, and which line (in the new file) ppaattcchh thought the hunk should go
     on.  If this is different from the line number specified in the diff, you
     will be told the offset.  A single large offset MAY be an indication that
     a hunk was installed in the wrong place.  You will also be told if a fuzz
     factor was used to make the match, in which case you should also be
     slightly suspicious.

   FFiilleennaammee DDeetteerrmmiinnaattiioonn
     If no original file is specified on the command line, ppaattcchh will try to
     figure out from the leading garbage what the name of the file to edit is.
     When checking a prospective file name, pathname components are stripped
     as specified by the --pp option and the file's existence and writability
     are checked relative to the current working directory (or the directory
     specified by the --dd option).

     If the diff is a context or unified diff, ppaattcchh is able to determine the
     old and new file names from the diff header.  For context diffs, the
     ``old'' file is specified in the line beginning with "***" and the
     ``new'' file is specified in the line beginning with "---".  For a
     unified diff, the ``old'' file is specified in the line beginning with
     "---" and the ``new'' file is specified in the line beginning with "+++".
     If there is an "Index:" line in the leading garbage (regardless of the
     diff type), ppaattcchh will use the file name from that line as the ``index''
     file.

     ppaattcchh will choose the file name by performing the following steps, with
     the first match used:

     1.   If ppaattcchh is operating in strict IEEE Std 1003.1-2004 (``POSIX.1'')
          mode, the first of the ``old'', ``new'' and ``index'' file names
          that exist is used.  Otherwise, ppaattcchh will examine either the
          ``old'' and ``new'' file names or, for a non-context diff, the
          ``index'' file name, and choose the file name with the fewest path
          components, the shortest basename, and the shortest total file name
          length (in that order).

     2.   If no file exists, ppaattcchh checks for the existence of the files in an
          RCS directory using the criteria specified above.  If found, ppaattcchh
          will attempt to get or check out the file.

     3.   If no suitable file was found to patch, the patch file is a context
          or unified diff, and the old file was zero length, the new file name
          is created and used.

     4.   If the file name still cannot be determined, ppaattcchh will prompt the
          user for the file name to use.

     Additionally, if the leading garbage contains a "Prereq: " line, ppaattcchh
     will take the first word from the prerequisites line (normally a version
     number) and check the input file to see if that word can be found.  If
     not, ppaattcchh will ask for confirmation before proceeding.

     The upshot of all this is that you should be able to say, while in a news
     interface, the following:

           | patch -d /usr/src/local/blurfl

     and patch a file in the blurfl directory directly from the article
     containing the patch.

   BBaacckkuupp FFiilleess
     By default, the patched version is put in place of the original, with the
     original file backed up to the same name with the extension ".orig", or
     as specified by the --BB, --VV, or --zz options.  The extension used for making
     backup files may also be specified in the SIMPLE_BACKUP_SUFFIX
     environment variable, which is overridden by the options above.

     If the backup file is a symbolic or hard link to the original file, ppaattcchh
     creates a new backup file name by changing the first lowercase letter in
     the last component of the file's name into uppercase.  If there are no
     more lowercase letters in the name, it removes the first character from
     the name.  It repeats this process until it comes up with a backup file
     that does not already exist or is not linked to the original file.

     You may also specify where you want the output to go with the --oo option;
     if that file already exists, it is backed up first.

   NNootteess FFoorr PPaattcchh SSeennddeerrss
     There are several things you should bear in mind if you are going to be
     sending out patches:

     First, you can save people a lot of grief by keeping a _p_a_t_c_h_l_e_v_e_l_._h file
     which is patched to increment the patch level as the first diff in the
     patch file you send out.  If you put a "Prereq:" line in with the patch,
     it won't let them apply patches out of order without some warning.

     Second, make sure you've specified the file names right, either in a
     context diff header, or with an "Index:" line.  If you are patching
     something in a subdirectory, be sure to tell the patch user to specify a
     --pp option as needed.

     Third, you can create a file by sending out a diff that compares a null
     file to the file you want to create.  This will only work if the file you
     want to create doesn't exist already in the target directory.

     Fourth, take care not to send out reversed patches, since it makes people
     wonder whether they already applied the patch.

     Fifth, while you may be able to get away with putting 582 diff listings
     into one file, it is probably wiser to group related patches into
     separate files in case something goes haywire.

EENNVVIIRROONNMMEENNTT
     POSIXLY_CORRECT        When set, ppaattcchh behaves as if the ----ppoossiixx option
                            has been specified.
     SIMPLE_BACKUP_SUFFIX   Extension to use for backup file names instead of
                            ".orig".
     TMPDIR                 Directory to put temporary files in; default is
                            _/_t_m_p.
     PATCH_VERSION_CONTROL  Selects when numbered backup files are made.
     VERSION_CONTROL        Same as PATCH_VERSION_CONTROL.

FFIILLEESS
     _$_T_M_P_D_I_R_/_p_a_t_c_h_*  ppaattcchh temporary files
     _/_d_e_v_/_t_t_y        used to read input when ppaattcchh prompts the user

DDIIAAGGNNOOSSTTIICCSS
     Too many to list here, but generally indicative that ppaattcchh couldn't parse
     your patch file.

     The message "Hmm..." indicates that there is unprocessed text in the
     patch file and that ppaattcchh is attempting to intuit whether there is a
     patch in that text and, if so, what kind of patch it is.

     The ppaattcchh utility exits with one of the following values:

           0       Successful completion.
           1       One or more lines were written to a reject file.
           >1      An error occurred.

     When applying a set of patches in a loop it behooves you to check this
     exit status so you don't apply a later patch to a partially patched file.

SSEEEE AALLSSOO
     diff(1)

SSTTAANNDDAARRDDSS
     The ppaattcchh utility is compliant with the IEEE Std 1003.1-2004
     (``POSIX.1'') specification (except as detailed above for the ----ppoossiixx
     option), though the presence of ppaattcchh itself is optional.

     The flags [--CCEEffssttuuvvBBFFVVxxzz] and [----ppoossiixx] are extensions to that
     specification.

AAUUTTHHOORRSS
     Larry Wall with many other contributors.

CCAAVVEEAATTSS
     ppaattcchh cannot tell if the line numbers are off in an ed script, and can
     only detect bad line numbers in a normal diff when it finds a "change" or
     a "delete" command.  A context diff using fuzz factor 3 may have the same
     problem.  Until a suitable interactive interface is added, you should
     probably do a context diff in these cases to see if the changes made
     sense.  Of course, compiling without errors is a pretty good indication
     that the patch worked, but not always.

     ppaattcchh usually produces the correct results, even when it has to do a lot
     of guessing.  However, the results are guaranteed to be correct only when
     the patch is applied to exactly the same version of the file that the
     patch was generated from.

BBUUGGSS
     Could be smarter about partial matches, excessively deviant offsets and
     swapped code, but that would take an extra pass.

     Check patch mode (--CC) will fail if you try to check several patches in
     succession that build on each other.  The entire ppaattcchh code would have to
     be restructured to keep temporary files around so that it can handle this
     situation.

     If code has been duplicated (for instance with #ifdef OLDCODE ... #else
     ...  #endif), ppaattcchh is incapable of patching both versions, and, if it
     works at all, will likely patch the wrong one, and tell you that it
     succeeded to boot.

     If you apply a patch you've already applied, ppaattcchh will think it is a
     reversed patch, and offer to un-apply the patch.  This could be construed
     as a feature.

NetBSD 7.0                     November 7, 2015                     NetBSD 7.0
