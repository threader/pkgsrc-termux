$NetBSD: patch-ex__proto_h,v 1.1 2012/12/28 03:03:08 dholland Exp $

- declare void functions void
- fix up function pointer casting mess
- don't declare static functions in header files
- avoid sloppy code that subtracts 1 from the base address of a char[]
  (which isn't valid)

--- ex_proto.h.orig	2012-12-27 21:58:42.000000000 +0000
+++ ex_proto.h
@@ -81,352 +81,356 @@
 #ifdef	POSIX_1
 shand setsig __P((int, shand));
 #endif
-int init __P((void));
+void init __P((void));
 /* ex_addr.c */
-int setdot __P((void));
-int setdot1 __P((void));
-int setcount __P((void));
+void setdot __P((void));
+void setdot1 __P((void));
+void setcount __P((void));
 int getnum __P((void));
-int setall __P((void));
-int setnoaddr __P((void));
+void setall __P((void));
+void setnoaddr __P((void));
 line *address __P((char *));
-int setCNL __P((void));
-int setNAEOL __P((void));
+void setCNL __P((void));
+void setNAEOL __P((void));
 /* ex_cmds.c */
-int commands __P((int, int));
+void commands __P((int, int));
 /* ex_cmds2.c */
 int cmdreg __P((void));
 int endcmd __P((int));
-int eol __P((void));
-int error __P((char *, ...));
-int erewind __P((void));
-int fixol __P((void));
+void eol __P((void));
+void error __P((const char *, ...));
+void erewind __P((void));
+void fixol __P((void));
 int exclam __P((void));
-int makargs __P((void));
-int next __P((void));
-int newline __P((void));
-int nomore __P((void));
+void makargs __P((void));
+void next __P((void));
+void newline __P((void));
+void nomore __P((void));
 int quickly __P((void));
-int resetflav __P((void));
-int serror __P((char *, ...));
-int setflav __P((void));
+void resetflav __P((void));
+void serror __P((const char *, ...));
+void setflav __P((void));
 int skipend __P((void));
-int tailspec __P((int));
-int tail __P((char *));
-int tail2of __P((char *));
-int tailprim __P((char *, int, int));
-int vcontin __P((int));
-int vnfl __P((void));
+void tailspec __P((int));
+void tail __P((const char *));
+void tail2of __P((const char *));
+void tailprim __P((const char *, int, int));
+void vcontin __P((int));
+void vnfl __P((void));
 /* ex_cmdsub.c */
-int append __P((int (*)(), line *));
-int appendnone __P((void));
-int pargs __P((void));
-int delete __P((int));
-int deletenone __P((void));
-int squish __P((void));
-int join __P((int));
-int move __P((void));
-int put __P((void));
-int pragged __P((int));
-int shift __P((int, int));
-int tagfind __P((int));
-int yank __P((void));
-int zop __P((int));
-int zop2 __P((int, int));
-int plines __P((line *, line *, int));
-int pofix __P((void));
-int undo __P((int));
-int mapcmd __P((int, int));
-int cmdmac __P((int));
+int append __P((int (*)(void), line *));
+void appendnone __P((void));
+void pargs __P((void));
+void delete __P((int));
+void deletenone __P((void));
+void squish __P((void));
+void join __P((int));
+void move __P((void));
+void put __P((void));
+void pragged __P((int));
+void shift __P((int, int));
+void tagfind __P((int));
+void yank __P((void));
+void zop __P((int));
+void zop2 __P((int, int));
+void plines __P((line *, line *, int));
+void pofix __P((void));
+void undo __P((int));
+void mapcmd __P((int, int));
+void cmdmac __P((int));
 /* ex_data.c */
 /* ex_extern.c */
 /* ex_get.c */
-int ignchar __P((void));
+void ignchar __P((void));
 int getchar __P((void));
 int getcd __P((void));
 int peekchar __P((void));
 int peekcd __P((void));
 int gettty __P((void));
-line *setin __P((line *));
+void setin __P((line *));
 /* ex_io.c */
-int filename __P((int));
+void filename __P((int));
 int getargs __P((void));
-int getone __P((void));
-int rop __P((int));
-int rop2 __P((void));
-int rop3 __P((int));
-int wop __P((int));
+void getone __P((void));
+void rop __P((int));
+void rop2 __P((void));
+void rop3 __P((int));
+void wop __P((int));
 int getfile __P((void));
-int putfile __P((int));
-int wrerror __P((void));
-int source __P((char *, int));
-int clrstats __P((void));
+void putfile __P((int));
+void wrerror __P((void));
+void source __P((const char *, int));
+void clrstats __P((void));
 /* ex_put.c */
-int (*setlist __P((int))) __P((void));
-int (*setnumb __P((int))) __P((void));
+int (*setlist __P((bool))) __P((int));
+int (*setnumb __P((bool))) __P((int));
 int listchar __P((int));
 int normchar __P((int));
 int numbline __P((int));
-int normline __P((void));
+int normline __P((int));
 int putchar __P((int));
 int termchar __P((int));
-int flush __P((void));
-int flush1 __P((void));
-int fgoto __P((void));
-int tab __P((int));
-int noteinp __P((void));
-int termreset __P((void));
-int draino __P((void));
-int flusho __P((void));
-int putnl __P((void));
+void flush __P((void));
+void flush1 __P((void));
+void fgoto __P((void));
+void tab __P((int));
+void noteinp __P((void));
+void termreset __P((void));
+void draino __P((void));
+void flusho __P((void));
+void putnl __P((void));
 int putch __P((int));
-int putpad __P((char *));
-int setoutt __P((void));
-int vlprintf __P((char *, va_list));
-int lprintf __P((char *, ...));
-int putNFL __P((void));
-int pstart __P((void));
-int pstop __P((void));
-int tostart __P((void));
-int tostop __P((void));
-int gTTY __P((int));
-int noonl __P((void));
+void putpad __P((const char *));
+void setoutt __P((void));
+void vlprintf __P((const char *, va_list));
+void lprintf __P((const char *, ...));
+void putNFL __P((void));
+void pstart __P((void));
+void pstop __P((void));
+void tostart __P((void));
+void tostop __P((void));
+void vcook __P((void));
+void vraw __P((void));
+void gTTY __P((int));
+void noonl __P((void));
 /* ex_re.c */
-int global __P((int));
+void global __P((int));
 int substitute __P((int));
 int getsub __P((void));
-char *place __P((char *, char *, char *));
 int compile __P((int, int));
 int same __P((int, int));
 int execute __P((int, line *));
 int advance __P((char *, char *));
 /* ex_set.c */
-int set __P((void));
+void set __P((void));
 /* ex_subr.c */
-int any __P((int, char *));
+int any __P((int, const char *));
 int backtab __P((int));
-int change __P((void));
+void change __P((void));
 int column __P((char *));
-int comment __P((void));
-int Copy __P((char *, char *, int));
-int copyw __P((line *, line *, int));
-int copywR __P((line *, line *, int));
+void comment __P((void));
+void Copy __P((char *, char *, int));
+void copyw __P((line *, line *, int));
+void copywR __P((line *, line *, int));
 int ctlof __P((int));
-int dingdong __P((void));
+void dingdong __P((void));
 int fixindent __P((int));
-int filioerr __P((char *));
+void filioerr __P((const char *));
 char *genindent __P((int));
-int getDOT __P((void));
+void getDOT __P((void));
 line *getmark __P((int));
 int getn __P((char *));
-int ignnEOF __P((void));
+void ignnEOF __P((void));
 int is_white __P((int));
 int junk __P((int));
-int killed __P((void));
-int killcnt __P((int));
+void killed __P((void));
+void killcnt __P((int));
 int lineno __P((line *));
 int lineDOL __P((void));
 int lineDOT __P((void));
-int markDOT __P((void));
-int markpr __P((line *));
+void markDOT __P((void));
+void markpr __P((line *));
 int markreg __P((int));
-char *mesg __P((char *));
-int vmerror __P((char *, va_list));
-int merror __P((char *, ...));
+char *mesg __P((const char *));
+void vmerror __P((const char *, va_list));
+void merror __P((const char *, ...));
 int morelines __P((void));
-int nonzero __P((void));
+void nonzero __P((void));
 int notable __P((int));
-int notempty __P((void));
-int netchHAD __P((int));
-int netchange __P((int));
+void notempty __P((void));
+void netchHAD __P((int));
+void netchange __P((int));
 int printof __P((int));
-int putmark __P((line *));
-int putmk1 __P((line *, int));
-char *plural __P((long));
-int qcolumn __P((char *, char *));
-int reverse __P((line *, line *));
-int save __P((line *, line *));
-int save12 __P((void));
-int saveall __P((void));
+void putmark __P((line *));
+void putmk1 __P((line *, int));
+const char *plural __P((long));
+int qcolumn2 __P((char *, char *));
+void reverse __P((line *, line *));
+void save __P((line *, line *));
+void save12 __P((void));
+void saveall __P((void));
 int span __P((void));
-int synced __P((void));
+void synced __P((void));
 int skipwh __P((void));
-int vsmerror __P((char *, va_list));
-int smerror __P((char *, ...));
+void vsmerror __P((const char *, va_list));
+void smerror __P((const char *, ...));
 char *strend __P((char *));
-int strcLIN __P((char *));
-int syserror __P((void));
+const char *strendk __P((const char *));
+void strcLIN __P((const char *));
+void syserror __P((void));
 int tabcol __P((int, int));
 char *vfindcol __P((int));
 char *vskipwh __P((char *));
 char *vpastwh __P((char *));
 int whitecnt __P((char *));
-int markit __P((line *));
-int setrupt __P((void));
+void markit __P((line *));
+void setrupt __P((void));
 int preserve __P((void));
-int exitex __P((int));
+dead void exitex __P((int));
 /* ex_tagio.c */
 int topen __P((char *, char *));
 int tseek __P((int, off_t));
 int tgets __P((char *, int, int));
-int tclose __P((int));
+void tclose __P((int));
 /* ex_temp.c */
-int fileinit __P((void));
-int cleanup __P((int));
-int get_line __P((line));
+void fileinit __P((void));
+void cleanup __P((int));
+void get_line __P((line));
 int putline __P((void));
-int tlaste __P((void));
-int tflush __P((void));
-int synctmp __P((void));
-int TSYNC __P((void));
-int putreg __P((int));
+void tlaste __P((void));
+void tflush __P((void));
+void synctmp __P((void));
+void TSYNC __P((void));
+void putreg __P((int));
 int partreg __P((int));
-int notpart __P((int));
-int YANKreg __P((int));
-int kshift __P((void));
-int regbuf __P((int, char *, int));
+void notpart __P((int));
+void YANKreg __P((int));
+void kshift __P((void));
+void regbuf __P((int, char *, int));
 /* ex_tty.c */
-int gettmode __P((void));
-int setterm __P((char *));
-int setsize __P((void));
+void gettmode __P((void));
+void setterm __P((const char *));
+void setsize __P((void));
 char *fkey __P((int));
-int cost __P((char *));
+int cost __P((const char *));
 /* ex_unix.c */
-int unix0 __P((int));
-int filter __P((int));
-int recover __P((void));
-int waitfor __P((void));
-int revocer __P((void));
+void unix0 __P((int));
+void filter __P((int));
+void recover __P((void));
+void waitfor __P((void));
+void revocer __P((void));
 /* ex_v.c */
-int oop __P((void));
-int vop __P((void));
-int fixzero __P((void));
-int savevis __P((void));
-int undvis __P((void));
-int vsetsiz __P((int));
+void oop __P((void));
+void vop __P((void));
+void fixzero __P((void));
+void savevis __P((void));
+void undvis __P((void));
+void vsetsiz __P((int));
 /* ex_vadj.c */
-int vopen __P((line *, int));
+void vopen __P((line *, int));
 int vreopen __P((int, int, int));
 int vglitchup __P((int, int));
-int vinslin __P((int, int, int));
-int vrollup __P((int));
-int vup1 __P((void));
-int vmoveitup __P((int, int));
-int vscrap __P((void));
-int vrepaint __P((char *));
-int vredraw __P((int));
-int vsyncCL __P((void));
-int vsync __P((int));
-int vsync1 __P((int));
-int vreplace __P((int, int, int));
-int sethard __P((void));
-int vdirty __P((int, int));
+void vinslin __P((int, int, int));
+void vrollup __P((int));
+void vup1 __P((void));
+void vmoveitup __P((int, int));
+void vscrap __P((void));
+void vrepaint __P((char *));
+void vredraw __P((int));
+void vsyncCL __P((void));
+void vsync __P((int));
+void vsync1 __P((int));
+void vreplace __P((int, int, int));
+void sethard __P((void));
+void vdirty __P((int, int));
 /* ex_version.c */
-int printver __P((void));
+void printver __P((void));
 /* ex_vget.c */
-int ungetkey __P((int));
+void ungetkey __P((int));
 int getkey __P((void));
 int peekbr __P((void));
 int getbr __P((void));
 int getesc __P((void));
 int peekkey __P((void));
 int readecho __P((int));
-int setLAST __P((void));
-int addtext __P((char *));
-int setDEL __P((void));
-int setBUF __P((cell *));
+void setLAST __P((void));
+void addtext __P((char *));
+void setDEL __P((void));
+void setBUF __P((cell *));
 int noteit __P((int));
-int macpush __P((char *, int));
+void macpush __P((const char *, int));
+void vudump __P((const char *s));
 int vgetcnt __P((void));
 /* ex_vmain.c */
-int vmain __P((void));
-int prepapp __P((void));
-int vremote __P((int, int (*)(), int));
-int vsave __P((void));
+void vmain __P((void));
+void prepapp __P((void));
+void vremote __P((int, void (*)(int), int));
+void vsave __P((void));
 cell *str2cell __P((cell *, char *));
 char *cell2str __P((char *, cell *));
 cell *cellcpy __P((cell *, cell *));
 size_t cellen __P((cell *));
 cell *cellcat __P((cell *, cell *));
 /* ex_voper.c */
-int operate __P((int, int));
+void operate __P((int, int));
 int find __P((int));
-int word __P((int (*)(), int));
-int eend __P((int (*)()));
+int word __P((void (*)(int), int));
+void eend __P((void (*)(int)));
 int wordof __P((int, char *));
 int wordch __P((char *));
 int margin __P((void));
 /* ex_vops.c */
-int vUndo __P((void));
-int vundo __P((int));
-int vmacchng __P((int));
-int vnoapp __P((void));
-int vmove __P((void));
-int vdelete __P((int));
-int vchange __P((int));
-int voOpen __P((int, int));
-int vshftop __P((void));
-int vfilter __P((void));
-int vrep __P((int));
-int vyankit __P((void));
+void vUndo __P((void));
+void vundo __P((int));
+void vmacchng __P((int));
+void vnoapp __P((void));
+void vmove __P((void));
+void vmove_i __P((int));
+void vdelete __P((int));
+void vchange __P((int));
+void voOpen __P((int, int));
+void vshftop __P((void));
+void vfilter __P((void));
+void vrep __P((int));
+void vyankit __P((void));
 /* ex_vops2.c */
-int bleep __P((int, char *));
+void bleep __P((int, char *));
 int vdcMID __P((void));
-int takeout __P((cell *));
+void takeout __P((cell *));
 int ateopr __P((void));
-int showmode __P((int));
-int vappend __P((int, int, int));
-int back1 __P((void));
+void showmode __P((int));
+void vappend __P((int, int, int));
+void back1 __P((void));
 char *vget_line __P((int, char *, bool *, int));
-int vdoappend __P((char *));
+void vdoappend __P((const char *));
 /* ex_vops3.c */
-int llfind __P((int, int, int (*)(), line *));
+int llfind __P((int, int, void (*)(int), line *));
 int lindent __P((line *));
 int lmatchp __P((line *));
-int lsmatch __P((char *));
+void lsmatch __P((char *));
 int lnext __P((void));
-int lbrack __P((int, int (*)()));
+int lbrack __P((int, void (*)(int)));
 /* ex_vput.c */
-int vclear __P((void));
-int vclrcell __P((cell *, int));
-int vclrlin __P((int, line *));
-int vclreol __P((void));
-int vclrech __P((int));
-int fixech __P((void));
-int vcursbef __P((char *));
-int vcursat __P((char *));
-int vcursaft __P((char *));
-int vfixcurs __P((void));
-int vsetcurs __P((char *));
-int vigoto __P((int, int));
-int vcsync __P((void));
-int vgotoCL __P((int));
-int vgoto __P((int, int));
-int vprepins __P((void));
+void vclear __P((void));
+void vclrcell __P((cell *, int));
+void vclrlin __P((int, line *));
+void vclreol __P((void));
+void vclrech __P((int));
+void fixech __P((void));
+void vcursbef __P((char *));
+void vcursat __P((char *));
+void vcursaft __P((char *));
+void vfixcurs __P((void));
+void vsetcurs __P((char *));
+void vigoto __P((int, int));
+void vcsync __P((void));
+void vgotoCL __P((int));
+void vgoto __P((int, int));
+void vprepins __P((void));
 int vputch __P((int));
 int vinschar __P((int));
-int goim __P((void));
-int endim __P((void));
+void goim __P((void));
+void endim __P((void));
 int vputchar __P((int));
-int physdc __P((int, int));
+void physdc __P((int, int));
 /* ex_vwind.c */
-int vmoveto __P((line *, char *, int));
-int vjumpto __P((line *, char *, int));
-int vupdown __P((int, char *));
-int vup __P((int, int, int));
-int vdown __P((int, int, int));
-int vcontext __P((line *, int));
-int vclean __P((void));
-int vshow __P((line *, line *));
-int vroll __P((int));
+void vmoveto __P((line *, char *, int));
+void vjumpto __P((line *, char *, int));
+void vupdown __P((int, char *));
+void vup __P((int, int, int));
+void vdown __P((int, int, int));
+void vcontext __P((line *, int));
+void vclean __P((void));
+void vshow __P((line *, line *));
+void vroll __P((int));
 int vdepth __P((void));
-int vnline __P((char *));
+void vnline __P((char *));
 /* malloc.c */
 char *poolsbrk __P((intptr_t));
 /* printf.c */
 int printf __P((const char *, ...));
 int vprintf __P((const char *, va_list));
-char *p_dconv __P((long, char *));
+char *p_dconv __P((unsigned long, char *));
 
 woid onemt __P((int));
 woid onhup __P((int));
