$NetBSD: patch-aa,v 1.1.1.1 2009/09/10 20:16:45 wiz Exp $

--- src/lib/ic/input-device.c.orig	2008-08-11 16:59:42.000000000 +0000
+++ src/lib/ic/input-device.c
@@ -44,7 +44,9 @@
 #include <sys/ioctl.h>
 #include <sys/types.h>
 #include <sys/stat.h>
+#ifdef __Linux__
 #include <linux/input.h>
+#endif
 
 enum {
   DEVICE_DEVNODE=1
@@ -70,6 +72,7 @@ static GObjectClass *parent_class=NULL;
 #define test_bit(bit, array)    (array[bit>>3] & (1<<(bit&0x7)))
 
 static gboolean register_trigger_controls(const BtIcInputDevice * const self,int fd) {
+#ifdef __Linux__
   BtIcTriggerControl *control;
   guint ix;
   guint8 key_bitmask[KEY_MAX/8 + 1];
@@ -152,10 +155,12 @@ static gboolean register_trigger_control
       }
     }
   }
+#endif
   return(TRUE);
 }
 
 static gboolean register_abs_range_controls(const BtIcInputDevice * const self,int fd) {
+#ifdef __Linux__
   BtIcAbsRangeControl *control;
   guint ix;
   guint8 abs_bitmask[ABS_MAX/8 + 1];
@@ -220,10 +225,12 @@ static gboolean register_abs_range_contr
     }
   }
   // create controller instances and register them
+#endif
   return(TRUE);
 }
 
 static gboolean register_controls(const BtIcInputDevice * const self) {
+#ifdef __Linux__
   int fd;
   guint ix;
   guint8 evtype_bitmask[EV_MAX/8 + 1];
@@ -280,12 +287,14 @@ static gboolean register_controls(const 
   }
 
   close(fd);
+#endif
   return(TRUE);
 }
 
 //-- handler
 
 static gboolean io_handler(GIOChannel *channel,GIOCondition condition,gpointer user_data) {
+#ifdef __Linux__
   BtIcInputDevice *self=BTIC_INPUT_DEVICE(user_data);
   BtIcControl *control;
   GError *error=NULL;
@@ -326,6 +335,9 @@ static gboolean io_handler(GIOChannel *c
     self->priv->io_source=-1;
   }
   return(res);
+#else
+  return(FALSE);
+#endif
 }
 
 //-- constructor methods
