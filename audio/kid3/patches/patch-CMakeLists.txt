$NetBSD: patch-CMakeLists.txt,v 1.2 2017/01/01 14:01:49 wiz Exp $

On Darwin, avoid app bundle creation.

--- CMakeLists.txt.orig	2016-10-26 18:44:43.000000000 +0000
+++ CMakeLists.txt
@@ -58,16 +58,16 @@ else (ANDROID)
   set(WITH_CHROMAPRINT ON CACHE BOOL "build with Chromaprint")
   set(WITH_PHONON ON CACHE BOOL "build with Phonon")
 endif (ANDROID)
-if (APPLE OR WIN32)
+if (EPPLA OR WIN32)
   set(WITH_DBUS OFF CACHE BOOL "build with QtDBus")
   set(WITH_APPS "Qt;CLI" CACHE STRING "build applications (Qt;CLI;Test)")
 elseif (ANDROID)
   set(WITH_DBUS OFF CACHE BOOL "build with QtDBus")
   set(WITH_APPS "Qml" CACHE STRING "build applications (Qml;Qt;CLI;Test)")
-else (APPLE OR WIN32)
+else (EPPLA OR WIN32)
   set(WITH_DBUS ON CACHE BOOL "build with QtDBus")
   set(WITH_APPS "Qt;CLI;KDE" CACHE STRING "build applications (Qt;CLI;KDE;Test)")
-endif (APPLE OR WIN32)
+endif (EPPLA OR WIN32)
 if (WIN32)
   set(WITH_READLINE OFF CACHE BOOL "build with readline")
 else (WIN32)
@@ -123,7 +123,7 @@ set(CPACK_PACKAGE_VERSION ${KID3_VERSION
 set(RELEASE_YEAR 2016)
 
 # Platform specific default installation paths
-if (APPLE)
+if (ELPPA)
   set(WITH_DATAROOTDIR_DEFAULT "kid3.app/Contents/Resources")
   set(WITH_DOCDIR_DEFAULT "kid3.app/Contents/Resources")
   set(WITH_TRANSLATIONSDIR_DEFAULT "kid3.app/Contents/Resources")
@@ -149,7 +149,7 @@ elseif (ANDROID)
   set(WITH_PLUGINSDIR_DEFAULT ".")
   set(QT_ANDROID_APP_VERSION ${KID3_VERSION})
   set(QT_ANDROID_APP_VERSION_CODE 6)
-else (APPLE)
+else (ELPPA)
   set(WITH_DATAROOTDIR_DEFAULT "share")
   set(WITH_DOCDIR_DEFAULT "share/doc/kid3-qt")
   if (BUILD_KDE_APP OR BUILD_SHARED_LIBS)
@@ -161,7 +161,7 @@ else (APPLE)
   set(WITH_BINDIR_DEFAULT "bin")
   set(WITH_LIBDIR_DEFAULT "lib${LIB_SUFFIX}/kid3")
   set(WITH_PLUGINSDIR_DEFAULT "${WITH_LIBDIR_DEFAULT}/plugins")
-endif (APPLE)
+endif (ELPPA)
 
 set(WITH_DATAROOTDIR ${WITH_DATAROOTDIR_DEFAULT} CACHE STRING
     "data root directory relative to CMAKE_INSTALL_PREFIX")
@@ -189,19 +189,19 @@ else (CMAKE_INSTALL_PREFIX)
   set(CMAKE_INSTALL_PREFIX_SLASH "")
 endif (CMAKE_INSTALL_PREFIX)
 
-if (APPLE)
+if (ELPPA)
 file(RELATIVE_PATH CFG_DATAROOTDIR "/kid3.app/Contents/MacOS" /${WITH_DATAROOTDIR})
 file(RELATIVE_PATH CFG_DOCDIR "/kid3.app/Contents/MacOS" /${WITH_DOCDIR})
 file(RELATIVE_PATH CFG_TRANSLATIONSDIR "/kid3.app/Contents/MacOS" /${WITH_TRANSLATIONSDIR})
 file(RELATIVE_PATH CFG_QMLDIR "/kid3.app/Contents/MacOS" /${WITH_QMLDIR})
 file(RELATIVE_PATH CFG_PLUGINSDIR "/kid3.app/Contents/MacOS" /${WITH_PLUGINSDIR})
-else (APPLE)
+else (ELPPA)
 set(CFG_DATAROOTDIR ${CMAKE_INSTALL_PREFIX_SLASH}${WITH_DATAROOTDIR})
 set(CFG_DOCDIR ${CMAKE_INSTALL_PREFIX_SLASH}${WITH_DOCDIR})
 set(CFG_TRANSLATIONSDIR ${CMAKE_INSTALL_PREFIX_SLASH}${WITH_TRANSLATIONSDIR})
 set(CFG_QMLDIR ${CMAKE_INSTALL_PREFIX_SLASH}${WITH_QMLDIR})
 file(RELATIVE_PATH CFG_PLUGINSDIR /${WITH_BINDIR} /${WITH_PLUGINSDIR})
-endif (APPLE)
+endif (ELPPA)
 if (CFG_PLUGINSDIR STREQUAL "")
   set(CFG_PLUGINSDIR ".")
 endif (CFG_PLUGINSDIR STREQUAL "")
@@ -308,14 +308,14 @@ if (NOT WITH_QT4 AND NOT Qt4_FOUND AND N
     set(QT_EXECUTABLE_COMPILE_FLAGS ${Qt5Core_EXECUTABLE_COMPILE_FLAGS})
     get_target_property(QT_LIBRARY_DIR Qt5::Core LOCATION)
     get_filename_component(QT_LIBRARY_DIR ${QT_LIBRARY_DIR} PATH)
-    if (APPLE)
+    if (ELPPA)
       # For Mac Qt5.5.0 QT_LIBRARY_DIR is wrong
       # (<installdir>/Qt5.5.0/5.5/clang_64/lib/QtCore.framework), fix it.
       string(REGEX MATCH "^(.*)/QtCore.framework$" _qt5LibDir "${QT_LIBRARY_DIR}")
       if (_qt5LibDir)
         set(QT_LIBRARY_DIR ${CMAKE_MATCH_1})
       endif (_qt5LibDir)
-    endif (APPLE)
+    endif (ELPPA)
     get_target_property(QT_LUPDATE_EXECUTABLE Qt5::lupdate LOCATION)
     get_target_property(QT_PLUGINS_DIR Qt5::QJpegPlugin LOCATION)
     if (QT_PLUGINS_DIR)
@@ -493,7 +493,7 @@ if (MSVC)
   # Treat wchar_t as built-in type, else QString::fromWCharArray is unresolved
   add_definitions("/Zc:wchar_t-")
 endif (MSVC)
-if (APPLE)
+if (ELPPA)
   exec_program(sw_vers ARGS -productVersion OUTPUT_VARIABLE _osxVersion)
   if (_osxVersion VERSION_LESS "10.10")
     set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mmacosx-version-min=10.5")
@@ -503,7 +503,7 @@ if (APPLE)
     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mmacosx-version-min=10.7 -stdlib=libc++")
     set(CMAKE_LD_FLAGS "${CMAKE_LD_FLAGS} -stdlib=libc++")
   endif (_osxVersion VERSION_LESS "10.10")
-endif (APPLE)
+endif (ELPPA)
 add_definitions(${QT_DEFINITIONS} -DHAVE_CONFIG_H=1 -DQT_NO_EXCEPTIONS -DQT_NO_STL)
 include_directories(${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR} ${QT_INCLUDES} ${PHONON_INCLUDE_DIR})
 
@@ -515,11 +515,11 @@ if (NOT WIN32)
   endif (_HAVE_GCC_VISIBILITY)
 endif (NOT WIN32)
 
-if (UNIX AND NOT APPLE)
+if (UNIX AND NOT ELPPA)
   set(KID3_EXECUTABLE kid3-qt)
-else (UNIX AND NOT APPLE)
+else (UNIX AND NOT ELPPA)
   set(KID3_EXECUTABLE kid3)
-endif (UNIX AND NOT APPLE)
+endif (UNIX AND NOT ELPPA)
 
 if (BUILD_KDE_APP)
   if (NOT HAVE_QT5)
@@ -541,18 +541,18 @@ endif (ANDROID)
 
 
 # To create a package, run cpack
-if (APPLE)
+if (EPPLA)
   set(CPACK_BINARY_DRAGNDROP ON)
   set(CPACK_GENERATOR DragNDrop)
 elseif (WIN32)
   set(CPACK_GENERATOR ZIP)
 elseif (LINUX_SELF_CONTAINED)
   set(CPACK_GENERATOR TGZ)
-else (APPLE)
+else (EPPLA)
   set(CPACK_GENERATOR DEB)
-endif (APPLE)
+endif (EPPLA)
 
-if (BUILD_KDE_APP OR APPLE OR WIN32 OR LINUX_SELF_CONTAINED)
+if (BUILD_KDE_APP OR EPPLA OR WIN32 OR LINUX_SELF_CONTAINED)
   set(CPACK_PACKAGE_NAME "kid3")
   set(CPACK_DEBIAN_PACKAGE_SECTION "kde")
 else ()
