$NetBSD: patch-libs_pbd_wscript,v 1.1 2016/06/20 08:17:43 kamil Exp $

There are problems with C++11 heavy code on NetBSD when building against _XOPEN_SOURCE.
Fix it by using _NETBSD_SOURCE.

--- libs/pbd/wscript.orig	2016-02-19 01:28:56.000000000 +0000
+++ libs/pbd/wscript
@@ -97,7 +97,7 @@ def configure(conf):
     conf.check(header_name='execinfo.h', define_name='HAVE_EXECINFO',mandatory=False)
     conf.check(header_name='unistd.h', define_name='HAVE_UNISTD',mandatory=False)
     if not Options.options.ppc:
-        conf.check_cc(function_name='posix_memalign', header_name='stdlib.h', cflags='-D_XOPEN_SOURCE=600', define_name='HAVE_POSIX_MEMALIGN', mandatory=False)
+        conf.check_cc(function_name='posix_memalign', header_name='stdlib.h', cflags='-D_XOPEN_SOURCE=600 -D_NETBSD_SOURCE', define_name='HAVE_POSIX_MEMALIGN', mandatory=False)
     conf.check(function_name='localtime_r', header_name='time.h', define_name='HAVE_LOCALTIME_R',mandatory=False)
 
     conf.write_config_header('libpbd-config.h', remove=False)
@@ -143,6 +143,9 @@ def build(bld):
     obj.install_path = bld.env['LIBDIR']
     obj.defines     += [ 'PACKAGE="' + I18N_PACKAGE + '"' ]
 
+    if sys.platform.startswith('netbsd'):
+        obj.linkflags = '-lexecinfo'
+
     if bld.env['build_target'] == 'x86_64':
         obj.defines += [ 'USE_X86_64_ASM' ]
     if bld.env['build_target'] == 'mingw':
