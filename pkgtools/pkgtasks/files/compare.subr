# Copyright (c) 2017 The NetBSD Foundation, Inc.
# All rights reserved.
#
# This code is derived from software contributed to The NetBSD Foundation
# by Johnny C. Lam.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# NAME
#	compare.subr -- compare two files for equality
#
# SYNOPSIS
#	task_compare <file1> <file2>
#
# DESCRIPTION
#	The task_compare function compares two text files and returns
#	whether the two files are the same.
#
# RETURN VALUES
#	Returns 0 if the two files are identical, and >0 otherwise.
#
# ENVIRONMENT
#	The following variables are used if they are set:
#
#	AWK	The name or path to the awk(1) utility.
#

__task_compare__="yes"

task_compare()
{
	: ${AWK:=awk}

	[ $# -eq 2 ] || return 127
	[ -n "$1" -a -n "$2" ] || return 127
	[ -f "$1" -a -f "$2" ] || return 127

	${AWK} 'NR == FNR { n1 = NR; a[NR] = $0; next }
			  { n2 = FNR; if ( a[n2] != $0 ) exit 1 }
		END	  { if ( n1 != n2 ) exit 1 }' "$1" "$2"
	return $?
}
