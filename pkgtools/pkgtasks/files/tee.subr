# Copyright (c) 2017 The NetBSD Foundation, Inc.
# All rights reserved.
#
# This code is derived from software contributed to The NetBSD Foundation
# by Johnny C. Lam.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# NAME
#	tee.subr -- duplicate standard input to standard output and files
#
# SYNOPSIS
#	task_tee [-a] [<file> ...]
#
# DESCRIPTION
#	The task_tee function copies standard input to standard output,
#	making a copy in zero or more files.
#
#	The options are as follows:
#
#	-a	Append the output to the files rather than overwriting
#		them.
#
#	The <file> parameters are the pathnames of the files in which
#	copies of the output are made.
#
# RETURN VALUES
#	Returns 0 on success, and >0 if an error occurs.
#

__task_tee__="yes"

task_load createfile

task_tee()
{
	local append=
	local arg
	local OPTIND=1
	while getopts ":a" arg "$@"; do
		case $arg in
		a)	append="yes" ;;
		*)	return 127 ;;
		esac
	done
	shift $(( ${OPTIND} - 1 ))

	# Overwrite all output files with empty files unless append was
	# requested.
	#
	if [ -z "$append" ]; then
		task_createfile "$@"
	fi

	local line file
	while IFS= read line; do
		echo "$line"
		for file; do
			echo "$line" >> $file
		done
	done
}
