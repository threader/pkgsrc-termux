#!@PERL@ -w
# -*- perl -*-
#
# $NetBSD: revbump,v 1.7 2014/12/15 23:25:54 mef Exp $
#
# Copyright (c) 2003, 2004 The NetBSD Foundation, Inc.
#
# This code was originally contributed to the NetBSD Foundation, Inc.
# by Julio Merino <jmmv@NetBSD.org> and Thomas Klausner <wiz@NetBSD.org>.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
# 3. Neither the name of author nor the names of its contributors may
#    be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND
# CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
# GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
# IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

use strict;
use Getopt::Std;

my (@PACKAGES, $PKGSRCDIR, %opt, $pkg);

$PKGSRCDIR = $ENV{PKGSRCDIR};
if (! $PKGSRCDIR) {
    $PKGSRCDIR = "/usr/pkgsrc";
}

sub usage {
    print STDERR "usage: revbump [-h] [-p pkgsrcdir] [cat1/pkg1 ... catN/pkgN]\n\n";
    print STDERR "If no packages are given as arguments, the list is read from stdin.\n";
    print STDERR "Packages for which revision cannot be bumped are written to stdout.\n";
    exit 0;
}

sub revbump {
    my $pkgdir = shift;
    my ($pkg, $oldpkgver, $pkgver, $done, $oldmk, $newmk, $backupmk);
    local (*OLDMK, *MAKE);
    my (@OLD, @NEW, @NEW2); # two phase edit

    $pkgdir =~ /\/(.*)$/;
    $pkg = $1;

    $oldmk = "$PKGSRCDIR/$pkgdir/Makefile";

    open(MAKE, '-|', "cd $PKGSRCDIR/$pkgdir ; make show-var VARNAME=PKGVERSION");
    $oldpkgver = <MAKE>;
    close(MAKE);
    chop $oldpkgver;

    open(OLDMK, $oldmk);
    @OLD = <OLDMK>;
    close(OLDMK);

 # first pass, check PKGREVISION line (only)
    $done = 0;
    while ($_  = shift @OLD) {
        if ($done == 0 && /^PKGREVISION=([ \t]+)([0-9]+)$/) {
            $done = $2 + 1;
            push(@NEW,  "PKGREVISION=${1}${done}\n");
        } else {
            push(@NEW,  $_);
        }
    }
  # if above is OK, just copy,
    if ( $done > 0 ){
	@NEW2 = @NEW;
  # or do second pass
    } else {
	while ($_ = shift @NEW) {
	if ($done == 0 && /^CATEGORIES=([ \t]+)/) {
	    push(@NEW2,"PKGREVISION=${1}1\n");
	    push(@NEW2, $_);
	    $done = 1;
	} elsif ($done == 0 && /^PKGNAME=([ \t]+)/) {
	    push (@NEW2, $_);
	    push (@NEW2,"PKGREVISION=${1}1\n");
	    $done = 1;
	} elsif ($done == 0 && /^COMMENT=([ \t]+)/) {
	    push (@NEW2, $_);
	    push (@NEW2,"PKGREVISION=${1}1\n");
	    $done = 1;
	} elsif ($done == 0 && /^.\s*include([ \t]+)/) {
	    push (@NEW2,"PKGREVISION=${1}1\n");
	    push (@NEW2, $_);
	    $done = 1;
	} else {
	    push (@NEW2, $_);
	};
	}
    } # end else
    $newmk = "$oldmk.new";
    open(NEWMK, ">$newmk");
    print NEWMK @NEW2;
    close(NEWMK);
    # no suitable place found
    if ($done == 0) {
        unlink "$newmk";
        return 0;
    }

    $backupmk = "$oldmk.orig";
    rename("$oldmk", "$backupmk");
    rename("$newmk", "$oldmk");

    open(MAKE, '-|', "cd $PKGSRCDIR/$pkgdir ; make show-var VARNAME=PKGVERSION");
    $pkgver = <MAKE>;
    close(MAKE);
    chop $pkgver;

    # compare previous PKGVERSION and current PKGVERSION to see if update
    # was successful
    if ($oldpkgver =~  /.*nb([0-9]+)$/) {
	$oldpkgver = $1;
    } else {
	$oldpkgver = 0;
    }
    if ($pkgver =~  /.*nb([0-9]+)$/) {
	$pkgver = $1;
    } else {
	$pkgver = 0;
    }
    if ($oldpkgver + 1 != $pkgver) {
	# unsuccessful, revert change
	rename("$backupmk", "$oldmk");
	return 0;
    }

    unlink "$backupmk";

    # print("Updated $pkgdir from $oldpkgver to $pkgver\n");

    return 1;
}

getopts('hp:', \%opt);
usage() if $opt{h};
if ($opt{p}) {
    $PKGSRCDIR = $opt{p};
}

@PACKAGES = ();
push @PACKAGES, @ARGV;

if (! -d $PKGSRCDIR || ! -d "$PKGSRCDIR/doc" || ! -d "$PKGSRCDIR/mk") {
    print STDERR "Invalid pkgsrc directory $PKGSRCDIR\n";
    exit 1;
}

if (! @PACKAGES) {
    while (<STDIN>) {
        chop;
        push @PACKAGES, $_;
    }
}

foreach $pkg (@PACKAGES) {
    if (! -f "$PKGSRCDIR/$pkg/Makefile") {
        print "$pkg\n";
    } else {
        print "$pkg\n" if revbump("$pkg") == 0;
        $pkg =~ /\/(.*)$/;
    }
}

exit 0;
